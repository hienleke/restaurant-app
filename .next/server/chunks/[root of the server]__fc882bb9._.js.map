{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lekeh/Desktop/seoul_remix_test/restaurant-app/src/server/translate.ts"],"sourcesContent":["\r\n// Store categories and their corresponding Korean text\r\nconst STORE_CATEGORY = {\r\n    SUSHI: 'sushi',\r\n    UNAGI: 'unagi',\r\n    TEMPURA: 'tempura',\r\n    TONKATSU: 'tonkatsu',\r\n    YAKITORI: 'yakitori',\r\n    SUKIYAKI: 'sukiyaki',\r\n    SOBA: 'soba',\r\n    RAMEN: 'ramen',\r\n    YAKISOBA: 'yakisoba',\r\n    OKONOMIYAKI: 'okonomiyaki',\r\n    DONBURI: 'donburi',\r\n    ODEN: 'oden',\r\n    KAISEKI: 'kaiseki',\r\n    HAMBAGU: 'hambagu',\r\n    TEPPANYAKI: 'teppanyaki',\r\n    CURRY: 'curry',\r\n    YAKINIKU: 'yakiniku',\r\n    NABE: 'nabe',\r\n    CAFE: 'cafe',\r\n    IZAKAYA: 'izakaya',\r\n    OTHER: 'other',\r\n};\r\n\r\nconst textByStoreCategory = {\r\n    [STORE_CATEGORY.SUSHI]: '스시·해산물',\r\n    [STORE_CATEGORY.UNAGI]: '장어',\r\n    [STORE_CATEGORY.TEMPURA]: '덴푸라',\r\n    [STORE_CATEGORY.TONKATSU]: '돈카츠·쿠시카츠',\r\n    [STORE_CATEGORY.YAKITORI]: '야키토리·꼬치',\r\n    [STORE_CATEGORY.SUKIYAKI]: '스키야키·샤브샤브',\r\n    [STORE_CATEGORY.SOBA]: '소바·우동',\r\n    [STORE_CATEGORY.RAMEN]: '라멘·츠케멘',\r\n    [STORE_CATEGORY.YAKISOBA]: '야키소바',\r\n    [STORE_CATEGORY.OKONOMIYAKI]: '오코노미야키·타코야키',\r\n    [STORE_CATEGORY.DONBURI]: '덮밥',\r\n    [STORE_CATEGORY.ODEN]: '오뎅',\r\n    [STORE_CATEGORY.KAISEKI]: '가이세키·일식',\r\n    [STORE_CATEGORY.HAMBAGU]: '함바그·오므라이스',\r\n    [STORE_CATEGORY.TEPPANYAKI]: '스테이크·철판요리',\r\n    [STORE_CATEGORY.CURRY]: '카레',\r\n    [STORE_CATEGORY.YAKINIKU]: '야키니쿠·호르몬',\r\n    [STORE_CATEGORY.NABE]: '나베',\r\n    [STORE_CATEGORY.CAFE]: '카페·디저트',\r\n    [STORE_CATEGORY.IZAKAYA]: '이자카야·바',\r\n    [STORE_CATEGORY.OTHER]: '기타 일본 음식',\r\n};\r\n\r\nexport const transalte = (categoryName: string) => {\r\n    // Normalize the input to lower case\r\n    let normalizedCategoryName = categoryName.toLowerCase();\r\n\r\n    // Find the category key that matches the normalized name\r\n    const categoryKey = Object.keys(STORE_CATEGORY).find(key => \r\n        STORE_CATEGORY[key as keyof typeof STORE_CATEGORY] === normalizedCategoryName\r\n    );\r\n\r\n    // Return the corresponding Korean text or a default message if not found\r\n    return categoryKey ? textByStoreCategory[STORE_CATEGORY[categoryKey as keyof typeof STORE_CATEGORY]] : 'Category not found';\r\n}"],"names":[],"mappings":"AACA,uDAAuD;;;;AACvD,MAAM,iBAAiB;IACnB,OAAO;IACP,OAAO;IACP,SAAS;IACT,UAAU;IACV,UAAU;IACV,UAAU;IACV,MAAM;IACN,OAAO;IACP,UAAU;IACV,aAAa;IACb,SAAS;IACT,MAAM;IACN,SAAS;IACT,SAAS;IACT,YAAY;IACZ,OAAO;IACP,UAAU;IACV,MAAM;IACN,MAAM;IACN,SAAS;IACT,OAAO;AACX;AAEA,MAAM,sBAAsB;IACxB,CAAC,eAAe,KAAK,CAAC,EAAE;IACxB,CAAC,eAAe,KAAK,CAAC,EAAE;IACxB,CAAC,eAAe,OAAO,CAAC,EAAE;IAC1B,CAAC,eAAe,QAAQ,CAAC,EAAE;IAC3B,CAAC,eAAe,QAAQ,CAAC,EAAE;IAC3B,CAAC,eAAe,QAAQ,CAAC,EAAE;IAC3B,CAAC,eAAe,IAAI,CAAC,EAAE;IACvB,CAAC,eAAe,KAAK,CAAC,EAAE;IACxB,CAAC,eAAe,QAAQ,CAAC,EAAE;IAC3B,CAAC,eAAe,WAAW,CAAC,EAAE;IAC9B,CAAC,eAAe,OAAO,CAAC,EAAE;IAC1B,CAAC,eAAe,IAAI,CAAC,EAAE;IACvB,CAAC,eAAe,OAAO,CAAC,EAAE;IAC1B,CAAC,eAAe,OAAO,CAAC,EAAE;IAC1B,CAAC,eAAe,UAAU,CAAC,EAAE;IAC7B,CAAC,eAAe,KAAK,CAAC,EAAE;IACxB,CAAC,eAAe,QAAQ,CAAC,EAAE;IAC3B,CAAC,eAAe,IAAI,CAAC,EAAE;IACvB,CAAC,eAAe,IAAI,CAAC,EAAE;IACvB,CAAC,eAAe,OAAO,CAAC,EAAE;IAC1B,CAAC,eAAe,KAAK,CAAC,EAAE;AAC5B;AAEO,MAAM,YAAY,CAAC;IACtB,oCAAoC;IACpC,IAAI,yBAAyB,aAAa,WAAW;IAErD,yDAAyD;IACzD,MAAM,cAAc,OAAO,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA,MACjD,cAAc,CAAC,IAAmC,KAAK;IAG3D,yEAAyE;IACzE,OAAO,cAAc,mBAAmB,CAAC,cAAc,CAAC,YAA2C,CAAC,GAAG;AAC3G","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lekeh/Desktop/seoul_remix_test/restaurant-app/src/server/trpc.ts"],"sourcesContent":["import { initTRPC } from \"@trpc/server\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { z } from \"zod\";\r\nimport {transalte} from \"./translate\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const createTRPCContext = () => ({\r\n  prisma,\r\n});\r\n\r\nconst t = initTRPC.context<typeof createTRPCContext>().create();\r\n\r\nexport const appRouter = t.router({\r\n  getRestaurants: t.procedure.query(async ({ ctx }) => {\r\n    const result = await ctx.prisma.restaurant.findMany();\r\n    return result;\r\n  }),\r\n\r\n  getCategories: t.procedure.query(async ({ ctx }) => {\r\n    const result = await ctx.prisma.category.findMany();\r\n    for (const category of result) {\r\n      category.name =  transalte(category.name);\r\n    }\r\n    return result;\r\n  }),\r\n\r\n  getRestaurantsByCategory: t.procedure\r\n    .input(\r\n      z.object({\r\n        categoryId: z.string(),\r\n      })\r\n    )\r\n    .query(async ({ ctx, input }) => {\r\n      const result = await ctx.prisma.$queryRaw`\r\n        SELECT r.*, c.name as categoryName \r\n        FROM \"Restaurant\" r\r\n        LEFT JOIN \"Category\" c ON r.\"categoryId\" = c.id\r\n        WHERE r.\"categoryId\" = ${input.categoryId}\r\n      `;\r\n      return result;\r\n    }),\r\n  addFavorite: t.procedure\r\n    .input(\r\n      z.object({\r\n        id: z.string(),\r\n        isFavorite: z.boolean(),\r\n      })\r\n    )\r\n    .mutation(async ({ ctx, input }) => {\r\n      const updatedRestaurant = await ctx.prisma.restaurant.update({\r\n        where: { id: input.id },\r\n        data: { isFavorite: input.isFavorite },\r\n      });\r\n      return updatedRestaurant; \r\n    }),\r\n});\r\n\r\nexport type AppRouter = typeof appRouter;\r\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,oBAAoB,IAAM,CAAC;QACtC;IACF,CAAC;AAED,MAAM,IAAI,oKAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM;AAEtD,MAAM,YAAY,EAAE,MAAM,CAAC;IAChC,gBAAgB,EAAE,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC9C,MAAM,SAAS,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,QAAQ;QACnD,OAAO;IACT;IAEA,eAAe,EAAE,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC7C,MAAM,SAAS,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ;QACjD,KAAK,MAAM,YAAY,OAAQ;YAC7B,SAAS,IAAI,GAAI,CAAA,GAAA,4HAAA,CAAA,YAAS,AAAD,EAAE,SAAS,IAAI;QAC1C;QACA,OAAO;IACT;IAEA,0BAA0B,EAAE,SAAS,CAClC,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,YAAY,sIAAA,CAAA,IAAC,CAAC,MAAM;IACtB,IAED,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC1B,MAAM,SAAS,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC;;;;+BAIjB,EAAE,MAAM,UAAU,CAAC;MAC5C,CAAC;QACD,OAAO;IACT;IACF,aAAa,EAAE,SAAS,CACrB,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,IAAI,sIAAA,CAAA,IAAC,CAAC,MAAM;QACZ,YAAY,sIAAA,CAAA,IAAC,CAAC,OAAO;IACvB,IAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,MAAM,oBAAoB,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;YAC3D,OAAO;gBAAE,IAAI,MAAM,EAAE;YAAC;YACtB,MAAM;gBAAE,YAAY,MAAM,UAAU;YAAC;QACvC;QACA,OAAO;IACT;AACJ","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lekeh/Desktop/seoul_remix_test/restaurant-app/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { createTRPCContext } from '../../../../server/trpc';\r\nimport { appRouter } from '../../../../server/trpc';\r\nimport { fetchRequestHandler } from '@trpc/server/adapters/fetch';\r\n\r\nconst handler = (req: Request) =>\r\n  fetchRequestHandler({\r\n    endpoint: '/api/trpc',\r\n    req,\r\n    router: appRouter,\r\n    createContext: createTRPCContext,\r\n  });\r\n\r\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,yKAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,uHAAA,CAAA,YAAS;QACjB,eAAe,uHAAA,CAAA,oBAAiB;IAClC","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}